name: ci

on:
  push:
    branches:
      - main
      - dev
      - gh-actions
  workflow_dispatch:
    inputs:
      publish-files:
        description: Should files be published as a release?
        type: boolean
        default: false
        required: false

# Original
# Preparation:
#   - Get signing certificate
#   - Transform configuration files
#   - Restore dependencies
# Build:
#   - Build .Net projects
#   - Build AI Tracker
# Test:
#   - Run test suite
# Output:
#   - Clean .Net builds
#   - Clean AI Tracker
#   - Copy PS scripts
#   - Zip files
#   - Publish artifacts

# * dotnet projects and AI Tracker can be paralellized

env:
  Solution_Directory: src\AnalyticsEngine\
  Build_Platform: Any CPU
  Build_ProcessorArchitecture: x86
  ClientID: ${{ secrets.APP_CLIENTID }}
  ClientSecret: ${{ secrets.APP_CLIENTSECRET }}
  TenantGUID: ${{ secrets.APP_TENANTGUID }}
  TenantDomain: ${{ secrets.APP_TENANTDOMAIN }}
  CognitiveEndpoint: ${{ secrets.APP_COGNITIVEENDPOINT }}
  CognitiveKey: ${{ secrets.APP_COGNITIVEKEY}}
  CosmosDbTestContainerCurrent: stats
  CosmosDbTestContainerHistory: history
  CosmosDbTestDatabaseName: UnitTestDevOps
  CosmosDb: ${{ secrets.APP_COSMOSDB }}
  # SPOInsightsEntities
  # UnitTestingOffice365Services
  redis: ${{ secrets.CONNECTIONSTRINGS_REDIS }}
  ServiceBus: ${{ secrets.CONNECTIONSTRINGS_SERVICEBUS }}
  Storage: ${{ secrets.CONNECTIONSTRINGS_STORAGE }}
  SoftwareDownloadURL: ${{ secrets.SOFTWAREDOWNLOADURL }}
  StatsApiSecret: ${{ secrets.STATSAPISECRET }}
  StatsApiUrl: ${{ secrets.STATSAPIURL }}

jobs:
  setup_build:
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.build-number.outputs.number }}
    steps:
      - name: Calculate build number
        id: build-number
        run: echo "number=$((100 + ${{ github.run_number }}))" >> "$GITHUB_OUTPUT"
  build_dotnet:
    # Preparation:
    #   - Get signing certificate
    #   - Transform configuration files
    #   - Restore dependencies
    # Build:
    #   - Build .Net projects
    # Test:
    #   - Run test suite
    # Output:
    #   - Clean .Net builds
    #   - Copy PS scripts
    #   - Zip files
    #   - Publish artifacts
    runs-on: windows-latest
    needs: setup_build
    strategy:
      matrix:
        configuration: [Release] # [Debug, Release]
    env:
      BuildId: ${{ needs.setup_build.outputs.build_number }}
      BuildLabel: Build ${{ needs.setup_build.outputs.build_number }}
    steps:
      - name: Output Build label
        run: echo ${{ env.BuildLabel }}
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      - name: Decode the PFX
        continue-on-error: true # TODO
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.PFX_BASE64 }}")
          $certificatePath = Join-Path -Path "${{ env.Solution_Directory }}" -ChildPath SPOInsightsBinaries.pfx
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      - name: Cache NuGet Packages
        id: nuget-packages
        uses: actions/cache@v4
        env:
          cache-name: nuget-package-cache
        with:
          path: ~\.nuget\packages
          key: ${{ runner.os }}-${{ env.cache-name }}
      # Configuration files
      - name: Config substitution - Unit tests
        uses: microsoft/variable-substitution@v1
        with:
          files: '${{ env.Solution_Directory }}\*\App.Release.config, ${{ env.Solution_Directory }}\Web\Web.Release.config'
      - name: Restore the application
        run: msbuild ${{ env.Solution_Directory }} -t:Restore `
          -p:Configuration=${{ env.Configuration }} `
          -p:Platform="${{ env.Build_Platform }}" `
          -p:ProcessorArchitecture=${{ env.Build_ProcessorArchitecture }}
        env:
          Configuration: ${{ matrix.configuration }}
      # Projects building
      - name: Build WebJob.AppInsightsImporter
        run: msbuild ${{ env.Solution_Directory }}WebJob.AppInsightsImporter\WebJob.AppInsightsImporter.csproj `
          -p:Configuration=${{ env.Configuration }} `
          -p:Platform="${{ env.Build_Platform }}" `
          -p:ProcessorArchitecture=${{ env.Build_ProcessorArchitecture }} `
          -p:PackageCertificateKeyFile=SPOInsightsBinaries.pfx `
          -p:PackageCertificatePassword=${{ secrets.PFX_KEY }} `
          -p:OutDir=${{ runner.temp }}\AppInsightsImporter `
          -p:OutputPath=${{ env.Configuration }} `
          -p:AllowedReferenceRelatedFileExtensions=none `
          -p:EmitCompilerGeneratedFiles=false
        env:
          Configuration: ${{ matrix.configuration }}
      - name: List output contents
        run: ls -r ${{ runner.temp }}\AppInsightsImporter
      - name: Archive AppInsightsImporter
        run: Compress-Archive -Force -Path "${{ runner.temp }}\AppInsightsImporter" `
          -DestinationPath "${{ env.ZipsFolder }}\AppInsightsImporter.zip"
        env:
          ZipsFolder: ${{ runner.temp }}\zips\${{ github.ref_name }} - build ${{ env.BuildId }}
      # Wrap up
      - name: Remove the PFX
        continue-on-error: true # TODO
        run: Remove-Item -Path SPOInsightsBinaries.pfx

# NPM ai tracker
# Test:
#   - Build AI Tracker
# Output:
#   - Clean AI Tracker
#   - Zip files
#   - Publish artifacts



