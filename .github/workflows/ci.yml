name: ci

on:
  push:
    branches:
      - main
      - dev
      - gh-actions
  workflow_dispatch:
    inputs:
      publish-files:
        description: Should files be published as a release?
        type: boolean
        default: false
        required: false

# Original
# Preparation:
#   - Get signing certificate
#   - Transform configuration files
#   - Restore dependencies
# Build:
#   - Build .Net projects
#   - Build AI Tracker
# Test:
#   - Run test suite
# Output:
#   - Clean .Net builds
#   - Clean AI Tracker
#   - Copy PS scripts
#   - Zip files
#   - Publish artifacts

# * dotnet projects and AI Tracker can be paralellized

env:
  Build_Number_Offset: 100
  Solution_Directory: src\AnalyticsEngine\
  Build_Platform: Any CPU
  Build_ProcessorArchitecture: x86
  ClientID: ${{ secrets.APP_CLIENTID }}
  ClientSecret: ${{ secrets.APP_CLIENTSECRET }}
  TenantGUID: ${{ secrets.APP_TENANTGUID }}
  TenantDomain: ${{ secrets.APP_TENANTDOMAIN }}
  CognitiveEndpoint: ${{ secrets.APP_COGNITIVEENDPOINT }}
  CognitiveKey: ${{ secrets.APP_COGNITIVEKEY}}
  CosmosDbTestContainerCurrent: stats
  CosmosDbTestContainerHistory: history
  CosmosDbTestDatabaseName: UnitTestDevOps
  CosmosDb: ${{ secrets.APP_COSMOSDB }}
  # SPOInsightsEntities
  # UnitTestingOffice365Services
  redis: ${{ secrets.CONNECTIONSTRINGS_REDIS }}
  ServiceBus: ${{ secrets.CONNECTIONSTRINGS_SERVICEBUS }}
  Storage: ${{ secrets.CONNECTIONSTRINGS_STORAGE }}
  SoftwareDownloadURL: ${{ secrets.SOFTWAREDOWNLOADURL }}
  StatsApiSecret: ${{ secrets.STATSAPISECRET }}
  StatsApiUrl: ${{ secrets.STATSAPIURL }}

jobs:
  setup_build:
    # This step will calculate the build number with an offset
    # so that build numbers will follow the ones from Azure DevOps
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.build-number.outputs.number }}
    steps:
      - name: Calculate build number
        id: build-number
        run: echo "number=$((${{ env.Build_Number_Offset }} + ${{ github.run_number }}))" >> "$GITHUB_OUTPUT"
  build_dotnet:
    # Preparation:
    #   - Get signing certificate
    #   - Transform configuration files
    #   - Restore dependencies
    # Build:
    #   - Build .Net projects
    # Output:
    #   - Clean .Net builds
    #   - Copy PS scripts
    #   - Zip files
    #   - Publish artifacts
    runs-on: windows-latest
    needs: setup_build
    strategy:
      matrix:
        configuration: [Release] # [Debug, Release]
    env:
      BuildId: ${{ needs.setup_build.outputs.build_number }}
      BuildLabel: Build ${{ needs.setup_build.outputs.build_number }}
    steps:
      - name: Output Build label
        run: echo ${{ env.BuildLabel }}
      - name: Prepare output folder
        id: prep
        shell: bash
        run: |
          mkdir -p "${{ env.ZipsFolder }}"
          echo "zips_folder=${{ env.ZipsFolder }}" >> "$GITHUB_OUTPUT"
        env:
          ZipsFolder: ${{ runner.temp }}\zips\${{ github.ref_name }} - build ${{ env.BuildId }}
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      - name: Decode the PFX
        id: pfx
        # continue-on-error: true # TODO
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.PFX_BASE64 }}")
          $certificatePath = Join-Path -Path "$(Get-Location)" -ChildPath "src/AnalyticsEngine" -AdditionalChildPath SPOInsightsBinaries.pfx
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
          echo "path=$certificatePath" >> "$GITHUB_OUTPUT"
      - name: Cache NuGet Packages
        id: nuget-packages
        uses: actions/cache@v4
        env:
          cache-name: nuget-package-cache
        with:
          path: ~\.nuget\packages
          key: ${{ runner.os }}-${{ env.cache-name }}
      # Configuration files
      - name: Config substitutions
        uses: microsoft/variable-substitution@v1
        with:
          files: '${{ env.Solution_Directory }}\*\App.Release.config, ${{ env.Solution_Directory }}\Web\Web.Release.config'
      - name: Restore the application
        run: msbuild ${{ env.Solution_Directory }} -t:Restore `
          -p:Configuration=${{ env.Configuration }} `
          -p:Platform="${{ env.Build_Platform }}" `
          -p:ProcessorArchitecture=${{ env.Build_ProcessorArchitecture }}
        env:
          Configuration: ${{ matrix.configuration }}

      # Projects building
      - name: Build WebJob.AppInsightsImporter
        run: msbuild ${{ env.Solution_Directory }}\WebJob.AppInsightsImporter\WebJob.AppInsightsImporter.csproj `
          -p:Configuration=${{ env.Configuration }} `
          -p:Platform="${{ env.Build_Platform }}" `
          -p:ProcessorArchitecture=${{ env.Build_ProcessorArchitecture }} `
          -p:OutDir=${{ runner.temp }}\AppInsightsImporter `
          -p:OutputPath=${{ env.Configuration }} `
          -p:AllowedReferenceRelatedFileExtensions=none `
          -p:EmitCompilerGeneratedFiles=false
        env:
          Configuration: ${{ matrix.configuration }}
      - name: List output contents
        run: ls -r ${{ runner.temp }}
      - name: Archive AppInsightsImporter
        run: |
          Remove-Item -Force -Recurse -ErrorAction SilentlyContinue "${{ runner.temp }}\AppInsightsImporter\_PublishedWebsites"
          Compress-Archive -Force -Path "${{ runner.temp }}\AppInsightsImporter" `
          -DestinationPath "${{ env.folder }}\AppInsightsImporter.zip"
        env:
          folder: ${{ steps.prep.outputs.zips_folder }}

      - name: Build WebJob.Office365ActivityImporter
        run: msbuild ${{ env.Solution_Directory }}\WebJob.Office365ActivityImporter\WebJob.Office365ActivityImporter.csproj `
          -p:Configuration=${{ env.Configuration }} `
          -p:Platform="${{ env.Build_Platform }}" `
          -p:ProcessorArchitecture=${{ env.Build_ProcessorArchitecture }} `
          -p:OutDir=${{ runner.temp }}\Office365ActivityImporter `
          -p:OutputPath=${{ env.Configuration }} `
          -p:AllowedReferenceRelatedFileExtensions=none `
          -p:EmitCompilerGeneratedFiles=false
        env:
          Configuration: ${{ matrix.configuration }}
      - name: List output contents
        run: ls -r ${{ runner.temp }}
      - name: Archive Office365ActivityImporter
        run: |
          Remove-Item -Force -Recurse -ErrorAction SilentlyContinue "${{ runner.temp }}\Office365ActivityImporter\_PublishedWebsites"
          Copy-Item -Recurse -Path "src/AnalyticsEngine/WebJob.Office365ActivityImporter/AutomationPS/*" `
          -Destination "${{ runner.temp }}\Office365ActivityImporter\AutomationPS"
          Compress-Archive -Force -Path "${{ runner.temp }}\Office365ActivityImporter" `
          -DestinationPath "${{ env.folder }}\Office365ActivityImporter.zip"
        env:
          folder: ${{ steps.prep.outputs.zips_folder }}

      - name: Build Website
        run: msbuild ${{ env.Solution_Directory }}\Web\Web.csproj `
          -p:Configuration=${{ env.Configuration }} `
          -p:Platform="${{ env.Build_Platform }}" `
          -p:ProcessorArchitecture=${{ env.Build_ProcessorArchitecture }} `
          -p:OutDir=${{ runner.temp }}\Website `
          -p:OutputPath=${{ env.Configuration }} `
          -p:AllowedReferenceRelatedFileExtensions=none `
          -p:EmitCompilerGeneratedFiles=false
        env:
          Configuration: ${{ matrix.configuration }}
      - name: List output contents
        run: ls -r ${{ runner.temp }}
      - name: Archive Website
        run: |
          Remove-Item -Force -Recurse -ErrorAction SilentlyContinue "${{ runner.temp }}\Website\_PublishedWebsites\Web\bin\Scripts"
          Compress-Archive -Force -Path "${{ runner.temp }}\Website\_PublishedWebsites\Web" `
          -DestinationPath "${{ env.folder }}\Website.zip"
        env:
          folder: ${{ steps.prep.outputs.zips_folder }}

      - name: Build Installer
        run: |
          msbuild ${{ env.Solution_Directory }}\App.ControlPanel\App.ControlPanel.WinForms.csproj `
          -p:Configuration=${{ env.Configuration }} `
          -p:Platform="${{ env.Build_Platform }}" `
          -p:ProcessorArchitecture=${{ env.Build_ProcessorArchitecture }} `
          -p:PackageCertificateKeyFile=SPOInsightsBinaries.pfx `
          -p:PackageCertificatePassword=${{ secrets.PFX_KEY }} `
          -p:OutDir=${{ runner.temp }}\ControlPanelApp `
          -p:OutputPath=${{ env.Configuration }} `
          -p:AllowedReferenceRelatedFileExtensions=none `
          -p:EmitCompilerGeneratedFiles=false
        env:
          Configuration: ${{ matrix.configuration }}
      - name: Sign installer
        run: |
          & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe' `
          sign /fd SHA256 /a /t http://timestamp.digicert.com /v `
          /f "${{ env.PfxPath }}" /p "${{ secrets.PFX_KEY}}" `
          "${{ runner.temp }}\ControlPanelApp\AnalyticsInstaller.exe"
        env:
          Configuration: ${{ matrix.configuration }}
          PfxPath: ${{ steps.pfx.outputs.path }}
      - name: List output contents
        run: ls -r ${{ runner.temp }}
      - name: Archive ControlPanelApp
        run: Compress-Archive -Force -Path "${{ runner.temp }}\ControlPanelApp" `
          -DestinationPath "${{ env.folder }}\ControlPanelApp.zip"
        env:
          folder: ${{ steps.prep.outputs.zips_folder }}

      # Wrap up
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.prep.outputs.zips_folder }}
          name: artifacts-dotnet
          if-no-files-found: error

      - name: Remove the PFX
        # continue-on-error: true # TODO
        run: |
          $certificatePath = Join-Path -Path "${{ env.Solution_Directory }}" -ChildPath SPOInsightsBinaries.pfx
          Remove-Item -Path $certificatePath
  build_aitracker:
    # NPM ai tracker
    # Build:
    #   - Build AI Tracker
    # Output:
    #   - Clean AI Tracker
    #   - Zip files
    #   - Publish artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: build AITracker
        run: |
          cd src/SPO/AITracker/TypeScript
          npm ci
          npm run build
          cd ../..
          rm -rf AITracker/TypeScript
          zip -r AITrackerInstaller.zip AITracker
      # Wrap up
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: src/SPO/AITrackerInstaller.zip
          name: artifacts-aitracker
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_dotnet
      - build_aitracker
    steps:
      - uses: actions/download-artifact@v4
        id: artifacts
      - run: ls -R ${{ steps.artifacts.outputs.download-path }}
