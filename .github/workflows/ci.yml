name: ci

on:
  push:
    branches:
      - main
      - dev
      - gh-actions
  workflow_dispatch:
    inputs:
      publish-files:
        description: Should files be published as a release?
        type: boolean
        default: false
        required: false

# Original
# Preparation:
#   - Get signing certificate
#   - Transform configuration files
#   - Restore dependencies
# Build:
#   - Build .Net projects
#   - Build AI Tracker
# Test:
#   - Run test suite
# Output:
#   - Clean .Net builds
#   - Clean AI Tracker
#   - Copy PS scripts
#   - Zip files
#   - Publish artifacts

# * dotnet projects and AI Tracker can be paralellized

env:
  Build_Platform: anycpu
  ClientID: ${{ secrets.APP_CLIENTID }}
  ClientSecret: ${{ secrets.APP_CLIENTSECRET }}
  TenantGUID: ${{ secrets.APP_TENANTGUID }}
  TenantDomain: ${{ secrets.APP_TENANTDOMAIN }}
  CognitiveEndpoint: ${{ secrets.APP_COGNITIVEENDPOINT }}
  CognitiveKey: ${{ secrets.APP_COGNITIVEKEY}}
  CosmosDbTestContainerCurrent: stats
  CosmosDbTestContainerHistory: history
  CosmosDbTestDatabaseName: UnitTestDevOps
  CosmosDb: ${{ secrets.APP_COSMOSDB }}
  # SPOInsightsEntities
  # UnitTestingOffice365Services
  redis: ${{ secrets.CONNECTIONSTRINGS_REDIS }}
  ServiceBus: ${{ secrets.CONNECTIONSTRINGS_SERVICEBUS }}
  Storage: ${{ secrets.CONNECTIONSTRINGS_STORAGE }}

jobs:
  # Tests job
  # Preparation:
  #   - Transform configuration files
  #   - Restore dependencies
  # Build:
  #   - Build .Net projects
  # Test:
  #   - Run test suite
  unit_tests:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Release] # [Debug, Release]
    env:
      Solution_Name: Tests.UnitTests.csproj
      Solution_Directory: src\AnalyticsEngine\Tests.UnitTests
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      - name: Cache NuGet Packages
        id: nuget-packages
        uses: actions/cache@v4
        env:
          cache-name: nuget-package-cache
        with:
          path: ~\.nuget\packages
          key: ${{ runner.os }}-${{ env.cache-name }}
      - name: Config substitution - Unit tests
        uses: microsoft/variable-substitution@v1
        with:
          files: '${{ env.Solution_Directory }}\App.Release.config'
      - name: Restore the application
        run: msbuild ${{ env.Solution_Directory }} -t:Restore -p:Platform=${{ env.Build_Platform }} -p:Configuration=${{ env.Configuration }}
        env:
          Configuration: ${{ matrix.configuration }}
      - name: Build solution
        run: msbuild ${{ env.Solution_Directory }} -p:Platform=${{ env.Build_Platform }} -p:Configuration=${{ env.Configuration }}
        #-p:PackageCertificateKeyFile=SPOInsightsBinaries.pfx -p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
        env:
          Configuration: ${{ matrix.configuration }}
      # Execute all unit tests in the solution
      - name: Execute unit tests
        continue-on-error: true
        # uses: microsoft/vstest-action@v1.0.0 # https://github.com/microsoft/vstest-action
        uses: jesusfer/vstest-action # https://github.com/microsoft/vstest-action
        with:
          testAssembly: Tests.UnitTests.dll
          searchFolder: ${{ env.Solution_Directory }}\bin\${{ env.Configuration }}\
          runInParallel: true
          vstestLocationMethod: location
          vstestLocation: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe
        env:
          Configuration: ${{ matrix.configuration }}
      
# Preparation:
#   - Get signing certificate
#   - Transform configuration files
#   - Restore dependencies
# Build:
#   - Build .Net projects
# Test:
#   - Run test suite
# Output:
#   - Clean .Net builds
#   - Clean AI Tracker
#   - Copy PS scripts
#   - Zip files
#   - Publish artifacts

# NPM ai tracker
# Test:
#   - Build AI Tracker
# Output:
#   - Clean AI Tracker
#   - Zip files
#   - Publish artifacts


      # - name: Decode the pfx
      #   run: |
      #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
      #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath SPOInsightsBinaries.pfx
      #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      # Remove the pfx
      # - name: Remove the pfx
      #   run: Remove-Item -Path SPOInsightsBinaries.pfx
